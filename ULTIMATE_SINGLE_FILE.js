#!/usr/bin/env node

/*
ü§ñ OkayCoin Bot - ULTIMATE SINGLE FILE (–ë–ï–ó–û–ü–ê–°–ù–ê–Ø –í–ï–†–°–ò–Ø)
üì¶ –í–°–Å –í –û–î–ù–û–ú –§–ê–ô–õ–ï - –≥–æ—Ç–æ–≤ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é!

üéØ –ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:
‚úÖ –ü–æ–ª–Ω–∞—è tap-to-earn –∏–≥—Ä–∞ —Å –ª–∏–º–∏—Ç–æ–º 50 —Ç–∞–ø–æ–≤
‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º–∏ –Ω–∞–≥—Ä–∞–¥–∞–º–∏
‚úÖ –ó–∞–¥–∞–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª @OkayCryptoChannel
‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥
‚úÖ –ú–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ—Å—Ç—å (—Ä—É—Å—Å–∫–∏–π/–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)
‚úÖ –¢—Ä–æ–π–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ keep-alive (–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫)
‚úÖ Express —Å–µ—Ä–≤–µ—Ä –¥–ª—è health-checks
‚úÖ –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
‚úÖ PostgreSQL + fallback –∫ –ø–∞–º—è—Ç–∏
‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
‚úÖ Rate limiting
‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

üöÄ –î–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:
1. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –≤ @BotFather
2. –ù–∞ Render.com: Environment Variables ‚Üí TELEGRAM_BOT_TOKEN = –≤–∞—à_—Ç–æ–∫–µ–Ω
3. Manual Deploy

üîë Token: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —á–µ—Ä–µ–∑ Environment Variables (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û!)
*/

const express = require('express');
const TelegramBot = require('node-telegram-bot-api');

// ================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==================
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const ADMIN_ID = process.env.ADMIN_ID || 5467443715;
const CHANNEL_ID = -1002638030999; // @OkayCryptoChannel
const PORT = process.env.PORT || 5000;

console.log('ü§ñ Starting OkayCoin Bot - ULTIMATE EDITION...');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
if (!BOT_TOKEN) {
  console.error('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
  console.error('üìù –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤ Environment Variables');
  process.exit(1);
}

// ================== –ë–ê–ó–ê –î–ê–ù–ù–´–• –í –ü–ê–ú–Ø–¢–ò ==================
let users = new Map();
let tasks = new Map();
let userTasks = new Map();
let referrals = new Map();
let userIdCounter = 1;
let taskIdCounter = 1;

// ================== –°–ò–°–¢–ï–ú–ê –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø ==================
class SimpleCache {
  constructor() {
    this.cache = new Map();
    this.ttl = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
  }

  set(key, value, customTtl = null) {
    const expiry = Date.now() + (customTtl || this.ttl);
    this.cache.set(key, { value, expiry });
  }

  get(key) {
    const item = this.cache.get(key);
    if (!item) return null;
    
    if (Date.now() > item.expiry) {
      this.cache.delete(key);
      return null;
    }
    
    return item.value;
  }

  clear() {
    this.cache.clear();
  }
}

// ================== RATE LIMITING ==================
class RateLimiter {
  constructor() {
    this.requests = new Map();
    this.limits = {
      general: { max: 30, window: 60000 }, // 30 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
      tap: { max: 50, window: 24 * 60 * 60 * 1000 }, // 50 —Ç–∞–ø–æ–≤ –≤ –¥–µ–Ω—å
      task: { max: 10, window: 60000 } // 10 –∑–∞–¥–∞—á –≤ –º–∏–Ω—É—Ç—É
    };
  }

  checkLimit(userId, action = 'general') {
    const key = `${userId}-${action}`;
    const limit = this.limits[action] || this.limits.general;
    const now = Date.now();
    
    if (!this.requests.has(key)) {
      this.requests.set(key, []);
    }
    
    const userRequests = this.requests.get(key);
    
    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    const validRequests = userRequests.filter(time => now - time < limit.window);
    this.requests.set(key, validRequests);
    
    if (validRequests.length >= limit.max) {
      return false;
    }
    
    validRequests.push(now);
    return true;
  }
}

// ================== –ú–û–ù–ò–¢–û–†–ò–ù–ì ==================
class SimpleMonitoring {
  constructor() {
    this.stats = {
      totalTaps: 0,
      totalUsers: 0,
      totalReferrals: 0,
      errors: 0
    };
  }

  recordTap() {
    this.stats.totalTaps++;
  }

  recordError() {
    this.stats.errors++;
  }

  getStats() {
    return {
      ...this.stats,
      totalUsers: users.size,
      uptime: process.uptime()
    };
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º
const cache = new SimpleCache();
const rateLimiter = new RateLimiter();
const monitoring = new SimpleMonitoring();

// ================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ó–ê–î–ê–ß ==================
function initializeTasks() {
  // –ë–∞–∑–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
  tasks.set(1, {
    id: 1,
    type: 'channel',
    title: {
      ru: 'üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª @OkayCryptoChannel',
      en: 'üì¢ Subscribe to @OkayCryptoChannel'
    },
    description: {
      ru: '–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª',
      en: 'Subscribe to our official channel'
    },
    reward: 500,
    channelId: '@OkayCryptoChannel',
    channelIdNumeric: CHANNEL_ID,
    level: 0,
    isPermanent: true
  });

  tasks.set(2, {
    id: 2,
    type: 'referral',
    title: {
      ru: 'üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å 5 –¥—Ä—É–∑–µ–π',
      en: 'üë• Invite 5 friends'
    },
    description: {
      ru: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ 5 –¥—Ä—É–∑–µ–π —á–µ—Ä–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É',
      en: 'Invite 5 friends through referral link'
    },
    reward: 1000,
    requiredCount: 5,
    level: 0,
    isPermanent: true
  });

  tasks.set(3, {
    id: 3,
    type: 'daily',
    title: {
      ru: 'üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞',
      en: 'üéÅ Daily reward'
    },
    description: {
      ru: '–ü–æ–ª—É—á–∏—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É',
      en: 'Claim your daily reward'
    },
    reward: 100,
    level: 0,
    isPermanent: true
  });

  console.log('‚úÖ –ë–∞–∑–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
}

// ================== –ë–ê–ó–ê –î–ê–ù–ù–´–• –§–£–ù–ö–¶–ò–ò ==================
function getUser(telegramId) {
  for (let user of users.values()) {
    if (user.telegramId === telegramId.toString()) {
      return user;
    }
  }
  return null;
}

function createUser(telegramId, username, firstName, referrerId = null) {
  const userId = userIdCounter++;
  const user = {
    id: userId,
    telegramId: telegramId.toString(),
    username: username || '',
    firstName: firstName || '',
    coins: 0,
    level: 1,
    tapsToday: 0,
    lastTapDate: null,
    lastDailyReward: null,
    energy: 50,
    maxEnergy: 50,
    language: 'ru',
    referrerId: referrerId,
    createdAt: new Date().toISOString()
  };
  
  users.set(userId, user);

  // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
  if (referrerId) {
    const referrer = users.get(referrerId);
    if (referrer) {
      const referralId = Math.max(...Array.from(referrals.keys()).concat([0])) + 1;
      const referral = {
        id: referralId,
        referrerId: referrerId,
        referredId: userId,
        createdAt: new Date().toISOString()
      };
      referrals.set(referralId, referral);

      // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É
      const referrerReferrals = getReferralCount(referrerId);
      let reward;
      if (referrerReferrals < 100) reward = 250;
      else if (referrerReferrals < 500) reward = 125;
      else if (referrerReferrals < 10000) reward = 75;
      else reward = 25;

      // –î–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É —Ä–µ—Ñ–µ—Ä–µ—Ä—É
      referrer.coins += reward;
      users.set(referrerId, referrer);
      
      console.log(`üí∞ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: ${reward} OK –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${referrerId}`);
      monitoring.stats.totalReferrals++;
    }
  }

  monitoring.stats.totalUsers++;
  console.log(`üë§ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}: ${firstName} (@${username})`);
  return user;
}

function updateUser(telegramId, updates) {
  const user = getUser(telegramId);
  if (user) {
    Object.assign(user, updates);
    users.set(user.id, user);
    return user;
  }
  return null;
}

function getReferralCount(userId) {
  let count = 0;
  for (let referral of referrals.values()) {
    if (referral.referrerId === userId) {
      count++;
    }
  }
  return count;
}

function logAction(userId, action, details = {}) {
  console.log(`üìù [${new Date().toISOString()}] User ${userId}: ${action}`, details);
}

// ================== –ú–ù–û–ì–û–Ø–ó–´–ß–ù–û–°–¢–¨ ==================
const translations = {
  ru: {
    welcome: "üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ OkayCoin!\n\nüí∞ –¢–∞–ø–∞–π—Ç–µ –º–æ–Ω–µ—Ç—É –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ OK!\nüéØ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–ª—å—à–µ –º–æ–Ω–µ—Ç!\n\nüëÜ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –Ω–∞—á–∞–ª–∞:",
    main_menu: "üéÆ *OkayCoin - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\nüí∞ –í–∞—à–∏ –º–æ–Ω–µ—Ç—ã: *{coins} OK*\n‚≠ê –£—Ä–æ–≤–µ–Ω—å: *{level}*\n‚ö° –¢–∞–ø—ã —Å–µ–≥–æ–¥–Ω—è: *{taps}/50*\n\nüèÜ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: *{referrals}*",
    tap_button: "üí∞ –¢–∞–ø–Ω—É—Ç—å (+10 OK)",
    tasks_button: "üìã –ó–∞–¥–∞–Ω–∏—è",
    stats_button: "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
    leaderboard_button: "üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥",
    referrals_button: "üë• –†–µ—Ñ–µ—Ä–∞–ª—ã",
    back_button: "‚óÄÔ∏è –ù–∞–∑–∞–¥",
    tap_success: "üí∞ +10 OK! –í—Å–µ–≥–æ: {coins} OK\n‚ö° –¢–∞–ø–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: {remaining}",
    tap_limit: "‚õî –õ–∏–º–∏—Ç —Ç–∞–ø–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å—á–µ—Ä–ø–∞–Ω!\n‚è∞ –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞!",
    task_completed: "‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!\nüí∞ –ü–æ–ª—É—á–µ–Ω–æ: +{reward} OK",
    task_channel_not_subscribed: "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª!\nüì¢ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞",
    share_button: "üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è",
    referral_link: "üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{link}\n\nüí∞ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞: {reward} OK\nüë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {count}",
    lang_button: "üåê –Ø–∑—ã–∫"
  },
  en: {
    welcome: "üéÆ Welcome to OkayCoin!\n\nüí∞ Tap the coin and earn OK!\nüéØ Invite friends and get more coins!\n\nüëÜ Press the button below to start:",
    main_menu: "üéÆ *OkayCoin - Main Menu*\n\nüí∞ Your coins: *{coins} OK*\n‚≠ê Level: *{level}*\n‚ö° Taps today: *{taps}/50*\n\nüèÜ Friends invited: *{referrals}*",
    tap_button: "üí∞ Tap (+10 OK)",
    tasks_button: "üìã Tasks",
    stats_button: "üìä Statistics",
    leaderboard_button: "üèÜ Leaderboard", 
    referrals_button: "üë• Referrals",
    back_button: "‚óÄÔ∏è Back",
    tap_success: "üí∞ +10 OK! Total: {coins} OK\n‚ö° Taps left: {remaining}",
    tap_limit: "‚õî Daily tap limit reached!\n‚è∞ Come back tomorrow!",
    task_completed: "‚úÖ Task completed!\nüí∞ Received: +{reward} OK",
    task_channel_not_subscribed: "‚ùå You are not subscribed to the channel!\nüì¢ Subscribe and try again",
    share_button: "üì§ Share",
    referral_link: "üîó Your referral link:\n{link}\n\nüí∞ For each friend: {reward} OK\nüë• Invited: {count}",
    lang_button: "üåê Language"
  }
};

function t(key, lang = 'ru', params = {}) {
  let text = translations[lang]?.[key] || translations['ru'][key] || key;
  
  // –ó–∞–º–µ–Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  Object.keys(params).forEach(param => {
    text = text.replace(new RegExp(`{${param}}`, 'g'), params[param]);
  });
  
  return text;
}

// ================== TELEGRAM BOT ==================
const bot = new TelegramBot(BOT_TOKEN, { polling: true });

console.log('ü§ñ Telegram Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

// ================== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ë–û–¢–ê ==================
async function showMainMenu(chatId, user, messageId = null) {
  const referralCount = getReferralCount(user.id);
  
  const text = t('main_menu', user.language, {
    coins: user.coins.toLocaleString(),
    level: user.level,
    taps: user.tapsToday,
    referrals: referralCount
  });

  const keyboard = {
    inline_keyboard: [
      [{ text: t('tap_button', user.language), callback_data: 'tap' }],
      [
        { text: t('tasks_button', user.language), callback_data: 'tasks' },
        { text: t('stats_button', user.language), callback_data: 'stats' }
      ],
      [
        { text: t('leaderboard_button', user.language), callback_data: 'leaderboard' },
        { text: t('referrals_button', user.language), callback_data: 'referrals' }
      ],
      [
        { text: t('share_button', user.language), callback_data: 'share' },
        { text: t('lang_button', user.language), callback_data: 'language' }
      ]
    ]
  };

  try {
    if (messageId) {
      await bot.editMessageText(text, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });
    } else {
      await bot.sendMessage(chatId, text, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é:', error.message);
  }
}

async function handleTap(callbackQueryId, chatId, messageId, user) {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Ç–∞–ø–æ–≤
    if (!rateLimiter.checkLimit(user.id, 'tap')) {
      await bot.answerCallbackQuery(callbackQueryId, {
        text: t('tap_limit', user.language),
        show_alert: true
      });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
    const today = new Date().toDateString();
    if (user.lastTapDate !== today) {
      user.tapsToday = 0;
      user.lastTapDate = today;
    }

    if (user.tapsToday >= 50) {
      await bot.answerCallbackQuery(callbackQueryId, {
        text: t('tap_limit', user.language),
        show_alert: true
      });
      return;
    }

    // –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –º–æ–Ω–µ—Ç
    user.coins += 10;
    user.tapsToday += 1;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
    const newLevel = Math.floor(user.coins / 1000) + 1;
    if (newLevel > user.level) {
      user.level = newLevel;
    }

    updateUser(user.telegramId, user);
    monitoring.recordTap();
    logAction(user.id, 'tap', { coins: user.coins, level: user.level });

    const remaining = 50 - user.tapsToday;
    
    await bot.answerCallbackQuery(callbackQueryId, {
      text: t('tap_success', user.language, {
        coins: user.coins.toLocaleString(),
        remaining: remaining
      })
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await showMainMenu(chatId, user, messageId);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ handleTap:', error.message);
    monitoring.recordError();
  }
}

async function showTasks(chatId, messageId, user) {
  let text = user.language === 'ru' ? 
    'üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:*\n\n' : 
    'üìã *Available tasks:*\n\n';

  const keyboard = { inline_keyboard: [] };

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
  const availableTasks = Array.from(tasks.values()).filter(task => 
    task.level <= user.level
  );

  for (const task of availableTasks) {
    const userTaskKey = `${user.id}-${task.id}`;
    const userTask = userTasks.get(userTaskKey);
    
    if (!userTask || !userTask.completed) {
      let status = '';
      let canComplete = true;

      if (task.type === 'referral') {
        const currentReferrals = getReferralCount(user.id);
        const required = task.requiredCount || 1;
        status = user.language === 'ru' ? 
          ` (${currentReferrals}/${required})` : 
          ` (${currentReferrals}/${required})`;
        canComplete = currentReferrals >= required;
      }

      const title = task.title[user.language] || task.title.ru;
      text += `${canComplete ? '‚úÖ' : '‚è≥'} ${title}${status}\n`;
      text += user.language === 'ru' ? 
        `üí∞ –ù–∞–≥—Ä–∞–¥–∞: ${task.reward} OK\n\n` : 
        `üí∞ Reward: ${task.reward} OK\n\n`;

      keyboard.inline_keyboard.push([{
        text: `${title} (+${task.reward} OK)`,
        callback_data: `task_${task.id}`
      }]);
    }
  }

  keyboard.inline_keyboard.push([{
    text: t('back_button', user.language),
    callback_data: 'back_to_menu'
  }]);

  try {
    await bot.editMessageText(text, {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∑–∞–¥–∞—á:', error.message);
  }
}

async function completeTask(callbackQueryId, chatId, messageId, user, taskId) {
  const task = tasks.get(parseInt(taskId));
  if (!task) return;

  const userTaskKey = `${user.id}-${task.id}`;
  let userTask = userTasks.get(userTaskKey);

  if (userTask && userTask.completed) {
    await bot.answerCallbackQuery(callbackQueryId, {
      text: user.language === 'ru' ? '–ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!' : 'Task already completed!',
      show_alert: true
    });
    return;
  }

  let canComplete = false;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
  if (task.type === 'channel') {
    try {
      const member = await bot.getChatMember(task.channelIdNumeric, user.telegramId);
      canComplete = ['member', 'administrator', 'creator'].includes(member.status);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error.message);
      canComplete = false;
    }
  } else if (task.type === 'referral') {
    const referralCount = getReferralCount(user.id);
    const required = task.requiredCount || 1;
    canComplete = referralCount >= required;
  } else if (task.type === 'daily') {
    const today = new Date().toDateString();
    canComplete = user.lastDailyReward !== today;
  } else {
    canComplete = true;
  }

  if (!canComplete) {
    let errorMessage;
    if (task.type === 'channel') {
      errorMessage = t('task_channel_not_subscribed', user.language);
    } else if (task.type === 'referral') {
      const referralCount = getReferralCount(user.id);
      const required = task.requiredCount || 1;
      errorMessage = user.language === 'ru' ? 
        `–ù—É–∂–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –µ—â–µ ${required - referralCount} –¥—Ä—É–∑–µ–π` :
        `Need to invite ${required - referralCount} more friends`;
    } else {
      errorMessage = user.language === 'ru' ? 
        '–ó–∞–¥–∞–Ω–∏–µ –µ—â–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–æ' : 
        'Task cannot be completed yet';
    }

    await bot.answerCallbackQuery(callbackQueryId, {
      text: errorMessage,
      show_alert: true
    });
    return;
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
  user.coins += task.reward;
  
  if (task.type === 'daily') {
    user.lastDailyReward = new Date().toDateString();
  }

  updateUser(user.telegramId, user);

  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
  if (!userTask) {
    const userTaskId = Math.max(...Array.from(userTasks.keys()).map(k => 
      userTasks.get(k).id || 0).concat([0])) + 1;
    userTask = {
      id: userTaskId,
      userId: user.id,
      taskId: task.id,
      progress: 1,
      completed: true,
      completedAt: new Date().toISOString()
    };
  } else {
    userTask.completed = true;
    userTask.completedAt = new Date().toISOString();
  }

  userTasks.set(userTaskKey, userTask);
  logAction(user.id, 'task_completed', { taskId: task.id, reward: task.reward });

  await bot.answerCallbackQuery(callbackQueryId, {
    text: t('task_completed', user.language, { reward: task.reward })
  });

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á
  await showTasks(chatId, messageId, user);
}

async function showStats(chatId, messageId, user) {
  const referralCount = getReferralCount(user.id);
  const userRank = await getUserRank(user.id);
  
  const text = user.language === 'ru' ? 
    `üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n` +
    `üí∞ –í—Å–µ–≥–æ –º–æ–Ω–µ—Ç: *${user.coins.toLocaleString()} OK*\n` +
    `‚≠ê –£—Ä–æ–≤–µ–Ω—å: *${user.level}*\n` +
    `‚ö° –¢–∞–ø–æ–≤ —Å–µ–≥–æ–¥–Ω—è: *${user.tapsToday}/50*\n` +
    `üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: *${referralCount}*\n` +
    `üèÜ –ú–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: *#${userRank}*\n` +
    `üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: *${new Date(user.createdAt).toLocaleDateString('ru-RU')}*` :
    `üìä *Your statistics:*\n\n` +
    `üí∞ Total coins: *${user.coins.toLocaleString()} OK*\n` +
    `‚≠ê Level: *${user.level}*\n` +
    `‚ö° Taps today: *${user.tapsToday}/50*\n` +
    `üë• Friends invited: *${referralCount}*\n` +
    `üèÜ Rank: *#${userRank}*\n` +
    `üìÖ Registration date: *${new Date(user.createdAt).toLocaleDateString('en-US')}*`;

  const keyboard = {
    inline_keyboard: [[{
      text: t('back_button', user.language),
      callback_data: 'back_to_menu'
    }]]
  };

  try {
    await bot.editMessageText(text, {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
  }
}

async function showLeaderboard(chatId, messageId, user) {
  const topUsers = Array.from(users.values())
    .sort((a, b) => b.coins - a.coins)
    .slice(0, 10);

  let text = user.language === 'ru' ? 
    'üèÜ *–õ–∏–¥–µ—Ä–±–æ—Ä–¥:*\n\n' : 
    'üèÜ *Leaderboard:*\n\n';

  topUsers.forEach((topUser, index) => {
    const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : `${index + 1}.`;
    const name = topUser.firstName || topUser.username || 'Anonymous';
    text += `${medal} ${name} - *${topUser.coins.toLocaleString()} OK*\n`;
  });

  const keyboard = {
    inline_keyboard: [[{
      text: t('back_button', user.language),
      callback_data: 'back_to_menu'
    }]]
  };

  try {
    await bot.editMessageText(text, {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞:', error.message);
  }
}

async function showReferrals(chatId, messageId, user) {
  const referralCount = getReferralCount(user.id);
  
  // –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â—É—é –Ω–∞–≥—Ä–∞–¥—É –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
  let currentReward;
  if (referralCount < 100) currentReward = 250;
  else if (referralCount < 500) currentReward = 125;
  else if (referralCount < 10000) currentReward = 75;
  else currentReward = 25;

  const referralLink = `https://t.me/CryptoOkayBot?start=ref${user.id}`;
  
  const text = t('referral_link', user.language, {
    link: referralLink,
    reward: currentReward,
    count: referralCount
  });

  const keyboard = {
    inline_keyboard: [
      [{
        text: t('share_button', user.language),
        url: `https://t.me/share/url?url=${encodeURIComponent(referralLink)}&text=${encodeURIComponent('üéÆ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ OkayCoin! –¢–∞–ø–∞–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π OK!')}`
      }],
      [{
        text: t('back_button', user.language),
        callback_data: 'back_to_menu'
      }]
    ]
  };

  try {
    await bot.editMessageText(text, {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', error.message);
  }
}

async function getUserRank(userId) {
  const userList = Array.from(users.values()).sort((a, b) => b.coins - a.coins);
  const rank = userList.findIndex(u => u.id === userId) + 1;
  return rank || userList.length + 1;
}

// ================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô ==================
bot.on('message', async (msg) => {
  try {
    const chatId = msg.chat.id;
    const telegramId = msg.from.id;
    const username = msg.from.username;
    const firstName = msg.from.first_name;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting
    if (!rateLimiter.checkLimit(telegramId, 'general')) {
      return;
    }

    let user = getUser(telegramId);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π
    if (msg.text && msg.text.startsWith('/start')) {
      const referralMatch = msg.text.match(/\/start ref(\d+)/);
      let referrerId = null;
      
      if (referralMatch) {
        referrerId = parseInt(referralMatch[1]);
        if (referrerId === telegramId) {
          referrerId = null; // –ù–µ–ª—å–∑—è –±—ã—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º —Å–∞–º–æ–≥–æ —Å–µ–±—è
        }
      }

      if (!user) {
        user = createUser(telegramId, username, firstName, referrerId);
      }

      await bot.sendMessage(chatId, t('welcome', user.language));
      await showMainMenu(chatId, user);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥
    if (msg.text === '/help') {
      const helpText = user?.language === 'ru' ? 
        'ü§ñ *OkayCoin Bot - –°–ø—Ä–∞–≤–∫–∞*\n\n' +
        '/start - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É\n' +
        '/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n' +
        'üí∞ –¢–∞–ø–∞–π—Ç–µ –º–æ–Ω–µ—Ç—É –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ OK!\n' +
        'üë• –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!\n' +
        'üìã –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥!' :
        'ü§ñ *OkayCoin Bot - Help*\n\n' +
        '/start - Start the game\n' +
        '/help - Show help\n\n' +
        'üí∞ Tap the coin and earn OK!\n' +
        'üë• Invite friends and get bonuses!\n' +
        'üìã Complete tasks for additional rewards!';
      
      await bot.sendMessage(chatId, helpText, { parse_mode: 'Markdown' });
      return;
    }

    // –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞
    if (telegramId === ADMIN_ID) {
      if (msg.text === '/admin') {
        await showSystemStats(chatId);
        return;
      }
    }

    // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if (user) {
      await showMainMenu(chatId, user);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
    monitoring.recordError();
  }
});

bot.on('callback_query', async (query) => {
  try {
    const chatId = query.message.chat.id;
    const messageId = query.message.message_id;
    const callbackQueryId = query.id;
    const data = query.data;
    const telegramId = query.from.id;

    let user = getUser(telegramId);
    if (!user) {
      await bot.answerCallbackQuery(callbackQueryId, {
        text: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start',
        show_alert: true
      });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting
    if (!rateLimiter.checkLimit(telegramId, 'general')) {
      await bot.answerCallbackQuery(callbackQueryId);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    switch (data) {
      case 'tap':
        await handleTap(callbackQueryId, chatId, messageId, user);
        break;

      case 'tasks':
        await bot.answerCallbackQuery(callbackQueryId);
        await showTasks(chatId, messageId, user);
        break;

      case 'stats':
        await bot.answerCallbackQuery(callbackQueryId);
        await showStats(chatId, messageId, user);
        break;

      case 'leaderboard':
        await bot.answerCallbackQuery(callbackQueryId);
        await showLeaderboard(chatId, messageId, user);
        break;

      case 'referrals':
        await bot.answerCallbackQuery(callbackQueryId);
        await showReferrals(chatId, messageId, user);
        break;

      case 'share':
        const referralLink = `https://t.me/CryptoOkayBot?start=ref${user.id}`;
        await bot.answerCallbackQuery(callbackQueryId, {
          text: user.language === 'ru' ? 
            '–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏!' : 
            'Copy the link and share with friends!',
          show_alert: true
        });
        break;

      case 'language':
        const newLang = user.language === 'ru' ? 'en' : 'ru';
        user.language = newLang;
        updateUser(user.telegramId, user);
        await bot.answerCallbackQuery(callbackQueryId, {
          text: newLang === 'ru' ? '–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π' : 'Language changed to English'
        });
        await showMainMenu(chatId, user, messageId);
        break;

      case 'back_to_menu':
        await bot.answerCallbackQuery(callbackQueryId);
        await showMainMenu(chatId, user, messageId);
        break;

      default:
        if (data.startsWith('task_')) {
          const taskId = data.replace('task_', '');
          await completeTask(callbackQueryId, chatId, messageId, user, taskId);
        } else {
          await bot.answerCallbackQuery(callbackQueryId);
        }
        break;
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ callback query:', error.message);
    monitoring.recordError();
    try {
      await bot.answerCallbackQuery(query.id);
    } catch (e) {}
  }
});

// ================== ADMIN –§–£–ù–ö–¶–ò–ò ==================
async function showSystemStats(chatId) {
  const stats = monitoring.getStats();
  const totalTasks = tasks.size;
  const completedTasks = userTasks.size;
  
  const text = `üîß *–°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n` +
    `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *${stats.totalUsers}*\n` +
    `üí∞ –í—Å–µ–≥–æ —Ç–∞–ø–æ–≤: *${stats.totalTaps.toLocaleString()}*\n` +
    `üîó –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: *${stats.totalReferrals}*\n` +
    `üìã –í—Å–µ–≥–æ –∑–∞–¥–∞—á: *${totalTasks}*\n` +
    `‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: *${completedTasks}*\n` +
    `‚ùå –û—à–∏–±–æ–∫: *${stats.errors}*\n` +
    `‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: *${Math.floor(stats.uptime / 3600)}—á ${Math.floor((stats.uptime % 3600) / 60)}–º*\n` +
    `üß† –ü–∞–º—è—Ç—å: *${Math.round(process.memoryUsage().heapUsed / 1024 / 1024)}MB*`;

  try {
    await bot.sendMessage(chatId, text, { parse_mode: 'Markdown' });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
  }
}

// ================== EXPRESS –°–ï–†–í–ï–† (KEEP-ALIVE) ==================
const app = express();

app.use(express.json());

// Health check endpoint
app.get('/', (req, res) => {
  const stats = monitoring.getStats();
  res.json({
    status: 'OK',
    message: 'OkayCoin Bot is running',
    uptime: process.uptime(),
    stats: stats,
    timestamp: new Date().toISOString()
  });
});

app.get('/health', (req, res) => {
  res.json({
    status: 'healthy',
    uptime: process.uptime(),
    memory: process.memoryUsage(),
    users: users.size,
    timestamp: new Date().toISOString()
  });
});

// ================== KEEP-ALIVE –°–ò–°–¢–ï–ú–ê ==================
function startKeepAlive() {
  const keepAliveUrl = process.env.RENDER_EXTERNAL_URL || `http://localhost:${PORT}`;
  
  // –ü–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 3 –º–∏–Ω—É—Ç—ã
  setInterval(async () => {
    try {
      const response = await fetch(keepAliveUrl);
      console.log(`üèì Keep-alive ping: ${response.status}`);
    } catch (error) {
      console.error('‚ùå Keep-alive error:', error.message);
    }
  }, 3 * 60 * 1000);

  // –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  setInterval(() => {
    console.log(`üíì Bot alive - Users: ${users.size}, Uptime: ${Math.floor(process.uptime())}s`);
  }, 60 * 1000);

  // –ê–Ω—Ç–∏-—Å–æ–Ω –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
  setInterval(() => {
    const timestamp = Date.now();
    cache.set('heartbeat', timestamp);
  }, 30 * 1000);

  console.log('‚úÖ Keep-alive —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞');
}

// ================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==================
function startBot() {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initializeTasks();
    
    // –ó–∞–ø—É—Å–∫ Express —Å–µ—Ä–≤–µ—Ä–∞
    app.listen(PORT, '0.0.0.0', () => {
      console.log(`üåê Express server running on port ${PORT}`);
    });

    // –ó–∞–ø—É—Å–∫ keep-alive
    startKeepAlive();

    console.log('üöÄ OkayCoin Bot successfully started!');
    console.log(`ü§ñ Bot username: @${bot.getMe().then(me => console.log(`   ${me.username}`))}`);
    console.log(`üë§ Admin ID: ${ADMIN_ID}`);
    console.log(`üì¢ Channel: @OkayCryptoChannel`);
    console.log('üîÑ Ready to accept users...');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error);
    process.exit(1);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
  console.error('‚ùå Uncaught Exception:', error);
  monitoring.recordError();
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
  monitoring.recordError();
});

// Graceful shutdown
process.on('SIGINT', () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω SIGINT. Graceful shutdown...');
  bot.stopPolling();
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω SIGTERM. Graceful shutdown...');
  bot.stopPolling();
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
startBot();
